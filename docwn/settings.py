"""
Django settings for docwn project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url
from dotenv import load_dotenv
from django.contrib.messages import constants as messages
from constants import (
    MIN_PASSWORD_LENGTH,
    MAX_SESSION_REMEMBER,
    SECURE_HSTS_SECONDS_HEROKU,
    SECURE_HSTS_SECONDS_DEVELOPMENT,
    TINYMCE_HEIGHT,
    TINYMCE_FONT_SIZE,
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Environment detection
IS_HEROKU = 'DYNO' in os.environ or 'HEROKU_APP_NAME' in os.environ
IS_PRODUCTION = IS_HEROKU or os.getenv('DJANGO_ENV') == 'production'

# Load environment variables from .env file only in development
if not IS_HEROKU:
    load_dotenv(os.path.join(BASE_DIR, ".env"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
if IS_HEROKU:
    DEBUG = os.getenv("DEBUG", "False").lower() == "true"
else:
    DEBUG = os.getenv("DEBUG", "True").lower() == "true"

# Allowed hosts configuration
if IS_HEROKU:
    ALLOWED_HOSTS = ['*']  # Heroku provides proper host headers
else:
    ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1,0.0.0.0").split(",")


# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "accounts.apps.AccountsConfig",
    "novels.apps.NovelsConfig",
    "interactions.apps.InteractionsConfig",
    "social_django",
    "django_recaptcha",
    "django_select2",
    "tinymce",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "social_django.middleware.SocialAuthExceptionMiddleware",
    'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = "docwn.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates", "static"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "common.utils.user_context",
                "interactions.context_processors.notifications_context"
            ],
        },
    },
]

WSGI_APPLICATION = "docwn.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration based on environment
if IS_HEROKU:
    # Heroku configuration - use DATABASE_URL
    database_url = os.getenv('DATABASE_URL')
    if database_url:
        DATABASES = {
            'default': dj_database_url.parse(database_url)
        }
    else:
        # Fallback for Heroku without DATABASE_URL
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': os.getenv('DB_NAME', 'docwn_production'),
                'USER': os.getenv('DB_USER', ''),
                'PASSWORD': os.getenv('DB_PASSWORD', ''),
                'HOST': os.getenv('DB_HOST', 'localhost'),
                'PORT': os.getenv('DB_PORT', '5432'),
            }
        }
else:
    # Local development configuration
    database_url = os.getenv('DATABASE_URL')
    if database_url:
        # Use DATABASE_URL if provided (for testing Heroku config locally)
        DATABASES = {
            'default': dj_database_url.parse(database_url)
        }
    elif os.getenv('DB_NAME'):
        # Use MySQL if DB_NAME is provided
        DATABASES = {
            "default": {
                "ENGINE": "django.db.backends.mysql",
                "NAME": os.getenv("DB_NAME"),
                "USER": os.getenv("DB_USER", ""),
                "PASSWORD": os.getenv("DB_PASSWORD", ""),
                "HOST": os.getenv("DB_HOST", "localhost"),
                "PORT": os.getenv("DB_PORT", "3306"),
                "OPTIONS": {
                    "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
                },
            }
        }
    else:
        # Default to SQLite for easy development
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation."
        "UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation."
        "MinimumLengthValidator",
        'OPTIONS': {
            'min_length': MIN_PASSWORD_LENGTH,
        }
    },
    {
        "NAME": "django.contrib.auth.password_validation."
        "CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation."
        "NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Ho_Chi_Minh"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Static files configuration based on environment
if IS_HEROKU:
    # WhiteNoise configuration for serving static files on Heroku
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    
    # Add WhiteNoise to middleware if not already present
    if 'whitenoise.middleware.WhiteNoiseMiddleware' not in MIDDLEWARE:
        # Insert after SecurityMiddleware
        security_index = MIDDLEWARE.index('django.middleware.security.SecurityMiddleware')
        MIDDLEWARE.insert(security_index + 1, 'whitenoise.middleware.WhiteNoiseMiddleware')
else:
    # Development static files (default Django behavior)
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

ASGI_APPLICATION = 'docwn.asgi.application'

# Authentication
AUTH_USER_MODEL = 'accounts.User'  # Thay 'accounts' bằng tên app của bạn

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'accounts.utils.AuthBackend',
    'django.contrib.auth.backends.ModelBackend',
    'social_core.backends.google.GoogleOAuth2',
]

# Login/Logout URLs
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Email configuration (for verification)
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = os.getenv('EMAIL_PORT')
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = 'no-reply@test.dev'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')

# Media files (for avatar upload)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Google OAuth settings
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.getenv('GOOGLE_OAUTH2_CLIENT_ID')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.getenv('GOOGLE_OAUTH2_CLIENT_SECRET')
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = ['email', 'profile']
SOCIAL_AUTH_GOOGLE_OAUTH2_USE_UNIQUE_USER_ID = True
SOCIAL_AUTH_USER_MODEL = 'accounts.User'
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.social_auth.associate_by_email',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'accounts.pipeline.prevent_duplicate_social_email',
)
SOCIAL_AUTH_ASSOCIATE_BY_EMAIL = True
SOCIAL_AUTH_LOGIN_ERROR_URL = '/accounts/login/'

# Captcha
RECAPTCHA_PUBLIC_KEY = os.getenv('RECAPTCHA_PUBLIC_KEY')
RECAPTCHA_PRIVATE_KEY = os.getenv('RECAPTCHA_PRIVATE_KEY')

# Security settings
SESSION_COOKIE_AGE = MAX_SESSION_REMEMBER
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

IMGBB_API_KEY = os.getenv('IMGBB_API_KEY')

# Avatar settings
AVATAR_UPLOAD_SETTINGS = {
    'ALLOWED_EXTENSIONS': ['jpg', 'jpeg', 'png', 'gif'],
    'ALLOWED_CONTENT_TYPES': ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'],
}

# Default avatar URL
DEFAULT_AVATAR_URL = '/static/novels/images/avatar.png'

# Environment-specific security settings
if IS_HEROKU or IS_PRODUCTION:
    
    # HTTPS settings for production
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = SECURE_HSTS_SECONDS_HEROKU
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Cookie security for production
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_HTTPONLY = True
    CSRF_COOKIE_HTTPONLY = True
    
    # Additional production settings
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'
    SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'
    
else:
    
    # Development settings - disable HTTPS requirements
    SECURE_SSL_REDIRECT = False
    SECURE_PROXY_SSL_HEADER = None
    
    # Development cookies (less secure but easier for development)
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_HTTPONLY = True  # Keep this for security
    CSRF_COOKIE_HTTPONLY = True     # Keep this for security
    
    # Disable HSTS for development
    SECURE_HSTS_SECONDS = SECURE_HSTS_SECONDS_DEVELOPMENT
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False


# TinyMCE Configuration
TINYMCE_DEFAULT_CONFIG = {
    'theme': 'silver',
    'height': TINYMCE_HEIGHT,
    'width': '100%',
    'menubar': False,
    'plugins': [
        'advlist', 'autolink', 'lists', 'link', 'charmap', 'preview',
        'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',
        'insertdatetime', 'table', 'help', 'wordcount'
    ],
    'toolbar': (
        'undo redo | blocks | bold italic underline strikethrough | '
        'alignleft aligncenter alignright alignjustify | '
        'bullist numlist outdent indent | '
        'forecolor backcolor | '
        'link unlink | '
        'removeformat | code fullscreen'
    ),
    'content_style': (
        f'body {{ font-family: -apple-system, BlinkMacSystemFont, San Francisco, '
        f'Segoe UI, Roboto, Helvetica Neue, sans-serif; font-size: {TINYMCE_FONT_SIZE}px; }}'
    ),
    'block_formats': 'Paragraph=p; Heading 1=h1; Heading 2=h2; Heading 3=h3; Heading 4=h4; Heading 5=h5; Heading 6=h6; Preformatted=pre',
    'valid_elements': 'p,br,strong,b,em,i,u,s,h1,h2,h3,h4,h5,h6,ul,ol,li,a[href],span[style]',
    'forced_root_block': 'p',
    'force_br_newlines': False,
    'force_p_newlines': True,
    'relative_urls': False,
    'remove_script_host': False,
    'convert_urls': True,
}
LANGUAGE_CODE = 'vi'  
USE_I18N = True
USE_L10N = True
USE_TZ = True

LANGUAGES = [
    ('vi', 'Tiếng Việt'),
    ('en', 'English'),
]
LOCALE_PATHS = [
    BASE_DIR / 'locale',
]
